{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-grid-background",
  "type": "registry:ui",
  "title": "Animated Grid Background",
  "description": "A dynamic grid background with animated glowing cells that move vertically with beautiful trailing effects.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/animated-grid-background.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"motion/react\"; // Updated import for MagicUI\nimport React, {\n  HTMLAttributes,\n  useCallback,\n  useMemo,\n  useEffect,\n  useState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\"; // Use MagicUI's utility function\n\ninterface AnimatedGridBackgroundProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  gridSize?: number;\n  gridColor?: string;\n  animatedCellsCount?: number;\n  animationSpeed?: number;\n  glowIntensity?: number;\n  animationDelay?: number;\n  backgroundColor?: string;\n}\n\nconst AnimatedGridCell = ({\n  gridSize,\n  column,\n  delay,\n  speed,\n  glowIntensity,\n  gridColor,\n  viewportHeight,\n}: {\n  gridSize: number;\n  column: number;\n  delay: number;\n  speed: number;\n  glowIntensity: number;\n  gridColor: string;\n  viewportHeight: number;\n}) => {\n  const hue =\n    gridColor === \"cyan\"\n      ? \"180\"\n      : gridColor === \"blue\"\n        ? \"220\"\n        : gridColor === \"green\"\n          ? \"120\"\n          : \"180\";\n  const totalDistance = viewportHeight + gridSize * 12;\n\n  return (\n    <motion.div\n      className=\"absolute pointer-events-none will-change-transform\"\n      style={{\n        left: `${column * gridSize}px`,\n        width: `${gridSize}px`,\n        height: `${gridSize}px`,\n      }}\n      initial={{ y: -gridSize * 6, opacity: 0 }}\n      animate={{\n        y: totalDistance,\n        opacity: [0, glowIntensity * 0.5, glowIntensity, glowIntensity, 0],\n      }}\n      transition={{\n        duration: speed,\n        delay,\n        repeat: Infinity,\n        ease: \"linear\",\n        repeatDelay: Math.random() * 2 + 1,\n      }}\n    >\n      {/* Main glowing cell */}\n      <div\n        className=\"w-full h-full\"\n        style={{\n          background: `hsl(${hue} 100% 70% / ${glowIntensity})`,\n          boxShadow: `0 0 ${gridSize}px hsl(${hue} 100% 70% / ${glowIntensity * 0.8})`,\n          border: `1px solid hsl(${hue} 100% 50% / ${glowIntensity})`,\n        }}\n      />\n\n      {/* Simple trailing cells */}\n      {Array.from({ length: 6 }).map((_, i) => (\n        <div\n          key={i}\n          className=\"absolute w-full h-full\"\n          style={{\n            top: `-${(i + 1) * gridSize}px`,\n            background: `hsl(${hue} 100% 50% / ${glowIntensity * (0.7 - i * 0.12)})`,\n            border: `1px solid hsl(${hue} 100% 50% / ${glowIntensity * (0.5 - i * 0.08)})`,\n          }}\n        />\n      ))}\n    </motion.div>\n  );\n};\n\nexport const AnimatedGridBackground: React.FC<AnimatedGridBackgroundProps> = ({\n  children,\n  className,\n  gridSize = 20,\n  gridColor = \"cyan\",\n  animatedCellsCount = 8,\n  animationSpeed = 6,\n  glowIntensity = 0.6,\n  animationDelay = 3,\n  backgroundColor = \"hsl(0 0% 3%)\",\n  ...props\n}) => {\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const updateDimensions = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => window.removeEventListener(\"resize\", updateDimensions);\n  }, []);\n\n  const generateAnimatedCells = useCallback(() => {\n    if (dimensions.width === 0) return [];\n\n    const columns = Math.ceil(dimensions.width / gridSize) + 1;\n\n    return Array.from({ length: animatedCellsCount }, (_, i) => ({\n      id: i,\n      column: Math.floor(Math.random() * columns),\n      delay: Math.random() * animationDelay,\n      speed: animationSpeed + Math.random() * 2 - 1,\n    }));\n  }, [\n    animatedCellsCount,\n    gridSize,\n    animationDelay,\n    animationSpeed,\n    dimensions.width,\n  ]);\n\n  const animatedCells = useMemo(\n    () => generateAnimatedCells(),\n    [generateAnimatedCells],\n  );\n\n  const gridColorValue = useMemo(() => {\n    const colorMap: Record<string, string> = {\n      cyan: \"hsl(180 100% 50% / 0.2)\",\n      blue: \"hsl(220 100% 50% / 0.2)\",\n      green: \"hsl(120 100% 50% / 0.2)\",\n      purple: \"hsl(280 100% 50% / 0.2)\",\n      pink: \"hsl(320 100% 50% / 0.2)\",\n    };\n    return colorMap[gridColor] || \"hsl(180 100% 50% / 0.2)\";\n  }, [gridColor]);\n\n  return (\n    <div className={cn(\"relative overflow-hidden\", className)} {...props}>\n      {/* Static Grid Background - NO ANIMATION */}\n      <div\n        className=\"absolute inset-0 pointer-events-none\"\n        style={{\n          backgroundColor,\n          backgroundImage: `\n            linear-gradient(${gridColorValue} 1px, transparent 1px),\n            linear-gradient(90deg, ${gridColorValue} 1px, transparent 1px)\n          `,\n          backgroundSize: `${gridSize}px ${gridSize}px`,\n        }}\n      />\n\n      {/* Animated Grid Cells */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {animatedCells.map((cell) => (\n          <AnimatedGridCell\n            key={cell.id}\n            gridSize={gridSize}\n            column={cell.column}\n            delay={cell.delay}\n            speed={cell.speed}\n            glowIntensity={glowIntensity}\n            gridColor={gridColor}\n            viewportHeight={dimensions.height}\n          />\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/magicui/animated-grid-background.tsx"
    }
  ]
}