{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "grid-beams",
  "type": "registry:ui",
  "title": "Grid Beams",
  "description": "A dynamic grid background with animated light beams rays and grid patterns.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/grid-beams.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"motion/react\";\nimport React, { HTMLAttributes, useMemo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GridBeamsProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  gridSize?: number;\n  gridColor?: string;\n  rayCount?: number;\n  rayOpacity?: number;\n  raySpeed?: number;\n  rayLength?: string;\n  gridFadeStart?: number;\n  gridFadeEnd?: number;\n  backgroundColor?: string;\n}\n\nconst LightRay = ({\n  left,\n  rotation,\n  width,\n  delay,\n  duration,\n  swayDuration,\n  swayDelay,\n  blurAmount,\n  isStrongerSway,\n  opacity,\n  speed,\n  length,\n}: {\n  left: string;\n  rotation: number;\n  width: number;\n  delay: number;\n  duration: number;\n  swayDuration: number;\n  swayDelay: number;\n  blurAmount: number;\n  isStrongerSway: boolean;\n  opacity: number;\n  speed: number;\n  length: string;\n}) => {\n  return (\n    <motion.div\n      className=\"absolute pointer-events-none\"\n      style={{\n        left,\n        top: \"-5%\",\n        height: length,\n        width: `${width}px`,\n        transformOrigin: \"50% 0%\",\n        background: `linear-gradient(to bottom, rgba(200, 220, 255, ${opacity}), rgba(200, 220, 255, 0))`,\n        filter: `blur(${blurAmount}px)`,\n        mixBlendMode: \"screen\",\n        transform: `translateX(-50%) rotate(${rotation}deg)`,\n      }}\n      animate={{\n        opacity: [0.3, 0.7, 0.3],\n        transform: [\n          `translateX(-50%) rotate(${rotation}deg)`,\n          `translateX(-50%) rotate(${rotation + (isStrongerSway ? 1 : 0.5)}deg)`,\n          `translateX(-50%) rotate(${rotation}deg)`,\n        ],\n      }}\n      transition={{\n        opacity: {\n          duration: duration / speed,\n          delay: delay / speed,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        },\n        transform: {\n          duration: swayDuration / speed,\n          delay: swayDelay / speed,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        },\n      }}\n    />\n  );\n};\n\nexport const GridBeams: React.FC<GridBeamsProps> = ({\n  children,\n  className,\n  gridSize = 40,\n  gridColor = \"blue\",\n  rayCount = 15,\n  rayOpacity = 0.35,\n  raySpeed = 1,\n  rayLength = \"45vh\",\n  gridFadeStart = 30,\n  gridFadeEnd = 90,\n  backgroundColor = \"#020412\",\n  ...props\n}) => {\n  const baseRayConfigs = useMemo(\n    () => [\n      // Far left edge rays\n      {\n        left: \"2%\",\n        rotation: 28,\n        width: 42,\n        duration: 8,\n        delay: -2,\n        swayDuration: 14,\n        swayDelay: -2,\n        blur: 27,\n        strongSway: false,\n      },\n      {\n        left: \"6%\",\n        rotation: 25,\n        width: 48,\n        duration: 7,\n        delay: -6,\n        swayDuration: 16,\n        swayDelay: -6,\n        blur: 30,\n        strongSway: true,\n      },\n\n      // Left side rays - positive angles decreasing\n      {\n        left: \"12%\",\n        rotation: 22,\n        width: 45,\n        duration: 6,\n        delay: -1,\n        swayDuration: 12,\n        swayDelay: -1,\n        blur: 25,\n        strongSway: false,\n      },\n      {\n        left: \"20%\",\n        rotation: 18,\n        width: 55,\n        duration: 8,\n        delay: -3,\n        swayDuration: 16,\n        swayDelay: -3,\n        blur: 28,\n        strongSway: true,\n      },\n      {\n        left: \"28%\",\n        rotation: 14,\n        width: 40,\n        duration: 7,\n        delay: -5,\n        swayDuration: 14,\n        swayDelay: -5,\n        blur: 30,\n        strongSway: false,\n      },\n      {\n        left: \"36%\",\n        rotation: 10,\n        width: 60,\n        duration: 9,\n        delay: -7,\n        swayDuration: 18,\n        swayDelay: -7,\n        blur: 26,\n        strongSway: true,\n      },\n      {\n        left: \"43%\",\n        rotation: 6,\n        width: 50,\n        duration: 5,\n        delay: -2,\n        swayDuration: 11,\n        swayDelay: -2,\n        blur: 32,\n        strongSway: false,\n      },\n\n      // Center ray - straight down\n      {\n        left: \"50%\",\n        rotation: 0,\n        width: 65,\n        duration: 10,\n        delay: -6,\n        swayDuration: 20,\n        swayDelay: -6,\n        blur: 24,\n        strongSway: false,\n      },\n\n      // Right side rays - negative angles increasing in magnitude\n      {\n        left: \"57%\",\n        rotation: -6,\n        width: 50,\n        duration: 7,\n        delay: -4,\n        swayDuration: 15,\n        swayDelay: -4,\n        blur: 29,\n        strongSway: true,\n      },\n      {\n        left: \"64%\",\n        rotation: -10,\n        width: 45,\n        duration: 6,\n        delay: -8,\n        swayDuration: 13,\n        swayDelay: -8,\n        blur: 31,\n        strongSway: false,\n      },\n      {\n        left: \"72%\",\n        rotation: -14,\n        width: 55,\n        duration: 8,\n        delay: -1,\n        swayDuration: 17,\n        swayDelay: -1,\n        blur: 27,\n        strongSway: true,\n      },\n      {\n        left: \"80%\",\n        rotation: -18,\n        width: 40,\n        duration: 9,\n        delay: -9,\n        swayDuration: 19,\n        swayDelay: -9,\n        blur: 33,\n        strongSway: false,\n      },\n      {\n        left: \"88%\",\n        rotation: -22,\n        width: 50,\n        duration: 11,\n        delay: -5,\n        swayDuration: 21,\n        swayDelay: -5,\n        blur: 30,\n        strongSway: true,\n      },\n\n      // Far right edge rays\n      {\n        left: \"94%\",\n        rotation: -25,\n        width: 48,\n        duration: 9,\n        delay: -4,\n        swayDuration: 15,\n        swayDelay: -4,\n        blur: 29,\n        strongSway: false,\n      },\n      {\n        left: \"98%\",\n        rotation: -28,\n        width: 42,\n        duration: 6,\n        delay: -8,\n        swayDuration: 17,\n        swayDelay: -8,\n        blur: 31,\n        strongSway: true,\n      },\n    ],\n    [],\n  );\n\n  const rayConfigs = useMemo(() => {\n    // If rayCount is different from 15, distribute rays evenly\n    if (rayCount === 15) {\n      return baseRayConfigs;\n    }\n\n    return Array.from({ length: rayCount }, (_, i) => {\n      const progress = i / (rayCount - 1);\n      const leftPercent = 2 + progress * 96; // 2% to 98%\n      const maxAngle = 28;\n      const rotation = maxAngle - progress * 2 * maxAngle; // 28 to -28\n\n      return {\n        left: `${leftPercent}%`,\n        rotation,\n        width: 40 + Math.random() * 25, // 40-65px width\n        duration: 6 + Math.random() * 5, // 6-11s\n        delay: -Math.random() * 10, // 0 to -10s\n        swayDuration: 12 + Math.random() * 9, // 12-21s\n        swayDelay: -Math.random() * 10, // 0 to -10s\n        blur: 24 + Math.random() * 9, // 24-33px\n        strongSway: Math.random() > 0.5,\n      };\n    });\n  }, [rayCount, baseRayConfigs]);\n\n  const gridColorValue = useMemo(() => {\n    const colorMap: Record<string, string> = {\n      blue: \"rgba(200, 220, 255, 0.2)\",\n      cyan: \"rgba(0, 255, 255, 0.2)\",\n      purple: \"rgba(200, 150, 255, 0.2)\",\n      green: \"rgba(150, 255, 150, 0.2)\",\n      pink: \"rgba(255, 150, 200, 0.2)\",\n    };\n    return colorMap[gridColor] || \"rgba(200, 220, 255, 0.2)\";\n  }, [gridColor]);\n\n  const gridMask = useMemo(() => {\n    const midPoint = (gridFadeStart + gridFadeEnd) / 2;\n    return `linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.05) ${gridFadeStart}%, rgba(0,0,0,0.2) ${midPoint}%, rgba(0,0,0,0.6) ${gridFadeEnd - 20}%, rgba(0,0,0,1) ${gridFadeEnd}%)`;\n  }, [gridFadeStart, gridFadeEnd]);\n\n  return (\n    <div\n      className={cn(\"relative overflow-hidden\", className)}\n      style={{\n        backgroundColor,\n        backgroundImage:\n          \"radial-gradient(ellipse at 50% -20%, #1a2c5a, #020412 70%)\",\n      }}\n      {...props}\n    >\n      {/* Static Grid Background with Customizable Gradient Fade */}\n      <div\n        className=\"absolute inset-0 pointer-events-none\"\n        style={{\n          backgroundImage: `\n            linear-gradient(${gridColorValue} 1px, transparent 1px),\n            linear-gradient(90deg, ${gridColorValue} 1px, transparent 1px)\n          `,\n          backgroundSize: `${gridSize}px ${gridSize}px`,\n          maskImage: gridMask,\n          WebkitMaskImage: gridMask,\n        }}\n      />\n\n      {/* Animated Light Rays */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {rayConfigs.map((config, index) => (\n          <LightRay\n            key={index}\n            left={config.left}\n            rotation={config.rotation}\n            width={config.width}\n            delay={config.delay}\n            duration={config.duration}\n            swayDuration={config.swayDuration}\n            swayDelay={config.swayDelay}\n            blurAmount={config.blur}\n            isStrongerSway={config.strongSway}\n            opacity={rayOpacity}\n            speed={raySpeed}\n            length={rayLength}\n          />\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/magicui/grid-beams.tsx"
    }
  ]
}